import { defineConfig } from 'vitest/config';
import { resolve } from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./src/lib/__tests__/rtdb-test-setup.ts'],
    include: [
      'src/lib/__tests__/**/*.test.ts',
      'src/lib/__tests__/**/*.test.tsx',
      'src/components/__tests__/**/*.test.tsx',
      'src/lib/__tests__/**/*.spec.ts',
      'src/lib/__tests__/**/*.spec.tsx'
    ],
    exclude: [
      'node_modules/**',
      'dist/**',
      'out/**',
      '**/*.d.ts'
    ],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      include: [
        'src/lib/**/*.ts',
        'src/lib/**/*.tsx',
        'src/components/**/*.tsx'
      ],
      exclude: [
        'src/lib/**/*.test.ts',
        'src/lib/**/*.test.tsx',
        'src/lib/**/*.spec.ts',
        'src/lib/**/*.spec.tsx',
        'src/lib/**/__tests__/**',
        'src/lib/**/test-utils.ts',
        'src/lib/**/test-runner.ts',
        'src/lib/**/test-config.ts',
        'src/lib/**/test-setup.ts'
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80
        }
      }
    },
    testTimeout: 10000,
    hookTimeout: 10000,
    teardownTimeout: 10000,
    maxConcurrency: 5,
    pool: 'threads',
    poolOptions: {
      threads: {
        singleThread: false,
        minThreads: 1,
        maxThreads: 4
      }
    },
    retry: 2,
    bail: 0,
    reporters: ['verbose', 'json', 'html'],
    outputFile: {
      json: './test-results/results.json',
      html: './test-results/index.html'
    },
    onConsoleLog(log, type) {
      if (type === 'stderr') {
        return false;
      }
      return true;
    },
    onConsoleWarn(warn) {
      return false;
    },
    onConsoleError(err) {
      return false;
    },
    mockReset: true,
    restoreMocks: true,
    clearMocks: true,
    resetMocks: true,
    fakeTimers: {
      toFake: ['setTimeout', 'setInterval', 'clearTimeout', 'clearInterval']
    },
    sequence: {
      concurrent: true,
      shuffle: false
    },
    isolate: true,
    passWithNoTests: true,
    allowOnly: false,
    run: true,
    watch: false,
    ui: false,
    open: false,
    api: false,
    browser: {
      enabled: false,
      name: 'chromium',
      provider: 'playwright',
      headless: true,
      api: {
        port: 51204
      }
    },
    deps: {
      external: ['firebase', 'firebase/database', 'firebase/auth'],
      inline: ['vitest']
    },
    alias: {
      '@': resolve(__dirname, './src'),
      '@/lib': resolve(__dirname, './src/lib'),
      '@/components': resolve(__dirname, './src/components')
    },
    define: {
      'import.meta.vitest': 'undefined'
    },
    env: {
      NODE_ENV: 'test',
      VITEST: 'true'
    },
    envDir: './',
    envPrefix: ['VITE_', 'NEXT_PUBLIC_'],
    logLevel: 'info',
    silent: false,
    reporterOptions: {
      json: {
        outputFile: './test-results/results.json'
      },
      html: {
        outputFile: './test-results/index.html',
        open: 'never'
      }
    }
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@/lib': resolve(__dirname, './src/lib'),
      '@/components': resolve(__dirname, './src/components')
    }
  },
  esbuild: {
    target: 'node18'
  }
});
