'use client'

import { useState, useEffect } from 'react'
import { useOptimizedInfiniteScroll } from '@/hooks/useOptimizedInfiniteScroll'
import { fetchOptimizedPokemonForMainDex } from '@/lib/optimizedInfiniteScrollFetchers'
import { getPokemonTotalCount } from '@/lib/api'
import PerformanceMonitor from './PerformanceMonitor'
import ModernPokemonCard from './ModernPokemonCard'
import type { Pokemon } from '@/types/pokemon'

export default function InfiniteScrollTest() {
  const [showPerformance, setShowPerformance] = useState(false)
  
  const {
    data: pokemonList as Pokemon[],
    loading,
    hasMore,
    error,
    loadMore,
    reset,
    sentinelRef
  } = useOptimizedInfiniteScroll<Pokemon>(
    fetchOptimizedPokemonForMainDex,
    {
      fetchSize: 20,
      initialLoad: true,
      enabled: true,
      retryAttempts: 3,
      retryDelay: 1000,
      scrollThreshold: 300,
      rootMargin: '300px',
      threshold: 0.1,
      getTotalCount: getPokemonTotalCount,
      maxItemsFallback: 1302,
      enableVirtualization: pokemonList.length > 100,
      virtualItemHeight: 200,
      overscan: 3,
      batchSize: 15,
      preloadThreshold: 0.7
    }
  )

  // Toggle performance monitoring
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === 'p' && e.ctrlKey) {
        setShowPerformance(prev => !prev)
      }
    }
    
    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [])

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-bg">
        <div className="text-center">
          <p className="text-red-600 mb-4">{error}</p>
          <button 
            onClick={reset}
            className="px-4 py-2 bg-poke-blue text-white rounded-lg hover:bg-poke-blue/90"
          >
            Try Again
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-bg">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-surface border-b border-border p-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-text">Optimized Infinite Scroll Test</h1>
            <p className="text-muted">Loaded: {pokemonList.length} Pokémon</p>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setShowPerformance(!showPerformance)}
              className="px-3 py-1 bg-poke-blue text-white rounded text-sm"
            >
              {showPerformance ? 'Hide' : 'Show'} Performance
            </button>
            <button
              onClick={reset}
              className="px-3 py-1 bg-poke-red text-white rounded text-sm"
            >
              Reset
            </button>
          </div>
        </div>
        <div className="mt-2 text-sm text-muted">
          Press Ctrl+P to toggle performance monitoring
        </div>
      </div>

      {/* Pokemon Grid */}
      <div className="p-4">
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-3">
          {pokemonList.map((pokemon) => (
            <ModernPokemonCard
              key={pokemon.id}
              pokemon={pokemon}
              isInComparison={false}
              onToggleComparison={() => {}}
              density="6cols"
            />
          ))}
        </div>

        {/* Loading indicator */}
        {loading && (
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-poke-blue" />
          </div>
        )}

        {/* End of list indicator */}
        {!hasMore && pokemonList.length > 0 && (
          <div className="text-center py-8 text-muted">
            All Pokémon loaded! ({pokemonList.length} total)
          </div>
        )}

        {/* Infinite scroll sentinel */}
        <div
          ref={sentinelRef}
          className="h-4 w-full"
          data-infinite-scroll-sentinel="true"
        />
      </div>

      {/* Performance Monitor */}
      {showPerformance && (
        <PerformanceMonitor 
          cardCount={pokemonList.length} 
          enabled={true} 
        />
      )}
    </div>
  )
}
