// Firestore rules (rules_version = '2')

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public lobby rooms
    match /battle_rooms/{roomId} {
      allow read: if request.auth != null && (
        // Everyone can see waiting/ready rooms
        resource.data.status in ['waiting', 'ready'] ||
        // Host or guest always keep access to their room
        resource.data.hostId == request.auth.uid ||
        resource.data.guestId == request.auth.uid
      );

      allow create: if request.auth != null &&
        request.resource.data.hostId == request.auth.uid;

      allow update: if request.auth != null && (
        // Host can always update the room
        resource.data.hostId == request.auth.uid ||
        // Guest can update their own fields (join, ready, leave)
        resource.data.guestId == request.auth.uid ||
        // Anyone already tracked as active can maintain presence fields
        ((request.resource.data.activeUsers is list) && request.resource.data.activeUsers.hasAny([request.auth.uid])) ||
        // First guest claiming an empty slot
        (!resource.data.guestId && request.resource.data.guestId == request.auth.uid)
      );

      allow delete: if request.auth != null &&
        resource.data.hostId == request.auth.uid;
    }

    // Battle documents managed by the cloud function/battle service
    match /battles/{battleId} {
      allow create: if request.auth != null &&
        request.resource.data.hostId == request.auth.uid;
      allow read, update: if request.auth != null && (
        resource.data.hostId == request.auth.uid ||
        resource.data.guestId == request.auth.uid
      );
      allow delete: if request.auth != null &&
        resource.data.hostId == request.auth.uid;
    }

    // Saved teams stored in per-user sub-collections (legacy) or flat collection (current)
    match /user_teams/{uid}/{teamId} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    match /userTeams/{teamId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Block everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
